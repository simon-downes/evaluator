#!/usr/bin/env php
<?php

require __DIR__. '/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

use Evaluator\ExpressionEvaluator;
use Evaluator\Lexer;
use Evaluator\Token;

(new Application('Evaluator', '1.0.0'))
    ->register('evaluate')
        ->addArgument('expr', InputArgument::REQUIRED, 'The expression to evaluate')
        ->setCode(function(InputInterface $input, OutputInterface $output) {


            $lexer = new Lexer();

            $lexer->addToken(Token::OPERAND, Token::NUMBER, '/^((-?[0-9]+\.[0-9]+)|(-?[0-9]+))/');

            $lexer->addToken(Token::WHITESPACE, Token::SPACE,'/^ /');

            //\ + * ? [ ^ ] $ ( ) { } = ! < > | : - #

            $lexer->addToken(Token::OPERATOR, Token::ADD, '/^\+/');
            $lexer->addToken(Token::OPERATOR, Token::SUBTRACT, '/^\-/');
            $lexer->addToken(Token::OPERATOR, Token::MULTIPLY, '/^\*/');
            $lexer->addToken(Token::OPERATOR, Token::DIVIDE, '/^\//');
            $lexer->addToken(Token::OPERATOR, Token::AND, '/^&/');
            $lexer->addToken(Token::OPERATOR, Token::OR, '/^\|/');
            $lexer->addToken(Token::OPERATOR, Token::NOT, '/^\!/');
            $lexer->addToken(Token::OPERATOR, Token::EQ, '/^\=/');
            $lexer->addToken(Token::OPERATOR, Token::LT, '/^\</');
            $lexer->addToken(Token::OPERATOR, Token::LTE, '/^\<=/');
            $lexer->addToken(Token::OPERATOR, Token::GT, '/^\>/');
            $lexer->addToken(Token::OPERATOR, Token::GTE, '/^\>=/');
            $lexer->addToken(Token::OPERATOR, Token::OPEN_PAREN, '/^\(/');
            $lexer->addToken(Token::OPERATOR, Token::CLOSE_PAREN, '/^\)/');
            $lexer->addToken(Token::OPERATOR, Token::MODULO, '/^%/');
            $lexer->addToken(Token::OPERATOR, Token::POWER, '/^\^/');

            $lexer->addToken(Token::OPERATOR, Token::SIN, '/^sin/');
            $lexer->addToken(Token::OPERATOR, Token::COS, '/^cos/');
            $lexer->addToken(Token::OPERATOR, Token::TAN, '/^tan/');
            $lexer->addToken(Token::OPERATOR, Token::ARCSIN, '/^arcsin/');
            $lexer->addToken(Token::OPERATOR, Token::ARCCOS, '/^arccos/');
            $lexer->addToken(Token::OPERATOR, Token::ARCTAN, '/^arctan/');
            $lexer->addToken(Token::OPERATOR, Token::LOG, '/^log/');
            $lexer->addToken(Token::OPERATOR, Token::LN, '/^ln/');
            $lexer->addToken(Token::OPERATOR, Token::SQRT, '/^sqrt/');
            $lexer->addToken(Token::OPERATOR, Token::ABS, '/^abs/');
            $lexer->addToken(Token::OPERATOR, Token::INT, '/^int/');


            $output->writeln(
                (new ExpressionEvaluator($lexer))->evaluate(
                    $input->getArgument('expr')
                )
            );

        })
    ->getApplication()
    ->setDefaultCommand('evaluate', true) // Single command application
    ->run();
